#version 450

const int rows = 900;
const int cols = 900;
const int rowPitch = 3840;

const int numCells = rows * cols;

layout(std140, set = 0, binding = 0) uniform SimParams {
    float varx;
    float vary;
} params;

layout(std430, set = 0, binding = 1) buffer CerrentCells {
    float data[];
} currentCells;

layout(std430, set = 0, binding = 2) buffer Cells {
    float data[];
} cells;

layout(std430, set = 0, binding = 3) buffer ResultBuffer {
    vec4 data[];
} resultColorBuffer;

const int states = 200;

void main() {
    // uint index = gl_GlobalInvocationID.x; 
    // if (index >= numCells) { return; }

    ivec2 coords = ivec2(gl_GlobalInvocationID.xy); 
    uint row = coords.y;
    uint col = coords.x;
    uint idx = row * rowPitch / 4 + col;
    uint cellIdx = row * rows + col;
    // if (index >= numCells) { return; }

    // resultColorBuffer.data[index] = uvec4(255.0 * float(coords.x) / float(900),10,10, 255);
    // resultColorBuffer.data[index] = uvec4(255,10,10, 255);


    float state = currentCells.data[cellIdx];

    if (state > states) {
        state = 0.0;
    } else {
        state += 1.0;
    }

    cells.data[cellIdx] = state;
    resultColorBuffer.data[idx] = vec4(0,0.5, state / float(states), 1);



    // tex.data[4 * index + 1] = 255;

    // int y = int(floor(float(index) / 900.0));
    // int x = int(index) - y * 900;
    // ivec2 coords = ivec2(x, y);

    // int state = cellsA.cells[index];

    // cellsB.cells[index] = (state + 1) % 200;

    // float c = float(states) / float(state);

    // tex.data[index] = 255;
    // tex.data[4 * index + 1] = 255;

    // c = float(numCells) / float(index);
    // tex.data[index] = uvec4(c, 0, 0, 1.0); 
    // tex.data[index] = uvec4(c, 0, 0, 255); 
    // tex.data[index] = uvec4(255, 255, 255, 255); 

    // tex.data[4 * index + 2] = 255; 
    // tex.data[index].y = 255; 
    // tex.data[index].z = 255; 

    // base pixel colour for image
    // vec4 pixel = vec4(0.0, 1.0, 0.0, 1.0);
    // get index in global work group i.e x,y position
    // ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    // output to a specific pixel in the image
    // imageStore(img_output, coords, pixel);
}
